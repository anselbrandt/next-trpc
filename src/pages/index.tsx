import { Note } from "@prisma/client";
import type { NextPage } from "next";
import Head from "next/head";
import { SubmitHandler, useForm } from "react-hook-form";
import superjson from "superjson";
import { SuperJSONResult } from "superjson/dist/types";
import { prisma } from "../db/client";
import { trpc } from "../utils/trpc";

const Hello: NextPage = () => {
  const hello = trpc.useQuery(["hello", { text: "client" }]);
  if (!hello.data) {
    return <div>Loading...</div>;
  }
  return (
    <div>
      <p>{hello.data.greeting}</p>
    </div>
  );
};

const TrpcNotes: NextPage = () => {
  const { data: notes } = trpc.useQuery(["notes.getAll"]);
  if (!notes) return null;
  return (
    <div>
      {notes.map((note) => (
        <div key={note.id}>{note.content}</div>
      ))}
    </div>
  );
};

interface NotesProps {
  data: SuperJSONResult;
}

const Notes: NextPage<NotesProps> = ({ data }) => {
  if (!data) return null;
  const notes = superjson.deserialize(data) as Note[];
  return (
    <div>
      {notes.map((note) => (
        <div key={note.id}>{note.content}</div>
      ))}
    </div>
  );
};

type Inputs = {
  title: string;
  content: string;
  authorId: string;
};

const NoteForm: NextPage = () => {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<Inputs>();
  const onSubmit: SubmitHandler<Inputs> = (data) => console.log(data);

  return (
    <div className="my-4">
      <form onSubmit={handleSubmit(onSubmit)}>
        <div className="text-xl font-bold underline">New note:</div>
        <div>
          <input
            className="border"
            placeholder="title"
            {...register("title", { required: true })}
          />
        </div>
        {errors.title && <div className="text-red-300">title required</div>}
        <div>
          <textarea className="border" {...register("content")} />
        </div>
        <div>
          <input
            className="border"
            placeholder="authorId"
            {...register("authorId", { required: true })}
          />
        </div>
        {errors.authorId && (
          <div className="text-red-300">authorId required</div>
        )}
        <div className="bg-blue-500 hover:bg-blue-700 text-white py-1 px-2 rounded w-auto inline-block">
          <button type="submit">submit</button>
        </div>
      </form>
    </div>
  );
};

interface Props {
  data: any;
}

const Home: NextPage<Props> = ({ data }) => {
  return (
    <div className="m-4">
      <Head>
        <title>Next.js tRPC</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="text-3xl font-bold underline">Next.js tRPC</div>
      <Hello />
      <div className="text-xl underline">From getServerSideProps</div>
      <Notes data={data} />
      <div className="text-xl underline">From tRPC</div>
      <TrpcNotes />
      <NoteForm />
    </div>
  );
};

export default Home;

export const getServerSideProps = async () => {
  const data = await prisma.note.findMany();

  return {
    props: {
      data: superjson.serialize(data),
    },
  };
};
